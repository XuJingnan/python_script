import pandas as pd

# constant for calculate air density
CONSTANT_GAS_DRY_AIR = 287.05
CONSTANT_GAS_WATER_VAPOUR = 461.5
CONSTANT_RELATIVE_HUMIDITY = 0.5
CONSTANT_STANDARD_AIR_DENSITY = 1.225

# some directory
INPUT_DIR = 'input/'
CONFIG_DIR = 'config/'
OUTPUT_DIR = 'output/'

# some input table
TABLE_TBL_POINTVALUE_10M = 'TBL_POINTVALUE_10M'
TABLE_TBL_POINTVALUE_10M_TEMOUTAVE = 'TEMOUTAVE'
TABLE_TBL_POINTVALUE_10M_WINDDIRECTIONAVE = 'WINDDIRECTIONAVE'
TABLE_TBL_POINTVALUE_10M_BLADEPITCHAVE = 'BLADEPITCHAVE'
TABLE_TBL_POINTVALUE_10M_WINDSPEEDAVE = 'WINDSPEEDAVE'
TABLE_TBL_POINTVALUE_10M_ROTORSPDAVE = 'ROTORSPDAVE'
TABLE_TBL_POINTVALUE_10M_GENSPDAVE = 'GENSPDAVE'
TABLE_TBL_POINTVALUE_10M_TORQUESETPOINTAVE = 'TORQUESETPOINTAVE'
TABLE_TBL_POINTVALUE_10M_TORQUEAVE = 'TORQUEAVE'
TABLE_TBL_POINTVALUE_10M_ACTIVEPWAVE = 'ACTIVEPWAVE'
TABLE_TBL_POINTVALUE_10M_PCURVESTSAVE = 'PCURVESTSAVE'
TABLE_TBL_POINTVALUE_10M_APPRODUCTION = 'APPRODUCTION'
TABLE_TBL_POINTVALUE_10M_NACELLEPOSITIONAVE = 'NACELLEPOSITIONAVE'
TABLE_TBL_POINTVALUE_10M_WINDSPEEDSTD = 'WINDSPEEDSTD'
TABLE_TBL_POINTVALUE_10M_WTG_ID = 'WTG_ID'
TABLE_TBL_POINTVALUE_10M_DATATIME = 'DATATIME'
TABLE_TBL_POINTVALUE_10M_RPPRODUCTION = 'RPPRODUCTION'
TABLE_TBL_POINTVALUE_10M_APCONSUMED = 'APCONSUMED'
TABLE_TBL_POINTVALUE_10M_RPCONSUMED = 'RPCONSUMED'

IM_DIM_WIND_WTG = 'IM_DIM_WIND_WTG'
IM_DIM_WIND_WTG_WTG_ID = 'WTG_ID'
IM_DIM_WIND_WTG_SITE_ID = 'SITE_ID'
IM_DIM_WIND_WTG_ALTITUDE = 'ALTITUDE'
IM_DIM_WIND_WTG_HUB_HEIGHT = 'HUB_HEIGHT'
IM_DIM_WIND_WTG_SCADANTF = 'SCADANTF'
IM_DIM_WIND_WTG_CONTRACTPC = 'CONTRACTPC'  # todo
IM_DIM_WIND_WTG_ACTUALPC = 'ACTUALPC'  # todo

IM_DIM_WIND_SITE = 'IM_DIM_WIND_SITE'
IM_DIM_WIND_SITE_SITE_ID = 'SITE_ID'
IM_DIM_WIND_SITE_AIRDENSITY = 'AIRDENSITY'

TABLE_MDM_NTF_DATA = 'MDM_NTF_DATA'
TABLE_MDM_NTF_DATA_PARENTID = 'PARENTID'
TABLE_MDM_NTF_DATA_ROTORSPEED = 'ROTORSPEED'
TABLE_MDM_NTF_DATA_A = 'A'
TABLE_MDM_NTF_DATA_B = 'B'
TABLE_MDM_NTF_DATA_C = 'C'

TABLE_IM_POWER_CURVE = 'IM_POWER_CURVE'
TABLE_IM_POWER_CURVE_WTG_ID = 'WTG_ID'
TABLE_IM_POWER_CURVE_WIND_SPEED_RANK = 'WIND_SPEED_RANK'
TABLE_IM_POWER_CURVE_ACTIVE_POWER = 'ACTIVE_POWER'
TABLE_IM_POWER_CURVE_THOERY_POWER = 'THOERY_POWER'

TABLE_IM_NO_CONN = 'IM_NO_CONN'
TABLE_IM_NO_CONN_WTG_ID = 'WTG_ID'
TABLE_IM_NO_CONN_NC_STARTTIME = 'NC_STARTTIME'
TABLE_IM_NO_CONN_ID = 'NC_ID'

TABLE_IM_SS = 'IM_SS'
TABLE_IM_SS_WTG_ID = 'WTG_ID'
TABLE_IM_SS_STARTTIME = 'SS_STARTTIME'
TABLE_IM_SS_ID = 'SS_ID'

# some output table
TABLE_IM_10M_CLEAN = 'IM_10M_CLEAN'
TABLE_IM_10M_CLEAN_CLEAN_FLAG = 'CLEAN_FLAG'

CLEAN_FLAG_TAG_NORMAL = 0
CLEAN_FLAG_TAG_NULL = 1
CLEAN_FLAG_TAG_OUT_OF_RANGE = 2

CLEAN_FLAG_TAG_WIND_SPEED_FREEZE = 4
# todo TABLE_TBL_POINTVALUE_10M_WINDSPEEDSTD / TABLE_TBL_POINTVALUE_10M_WINDSPEEDAVE too big ?
CLEAN_FLAG_TAG_PRODUCTION_DECREASE = 1
CLEAN_FLAG_TAG_PRODUCTION_TOO_LARGE = 2
CLEAN_FLAG_TAG_PRODUCTION_NAN = 4
CLEAN_FLAG_TAG_PRODUCTION_NAN_PRE = 8

CLEAN_FLAG_MAPS = {
    TABLE_TBL_POINTVALUE_10M_TEMOUTAVE: 0,
    TABLE_TBL_POINTVALUE_10M_WINDDIRECTIONAVE: 1,
    TABLE_TBL_POINTVALUE_10M_BLADEPITCHAVE: 2,
    TABLE_TBL_POINTVALUE_10M_WINDSPEEDAVE: 3,
    TABLE_TBL_POINTVALUE_10M_ROTORSPDAVE: 4,
    TABLE_TBL_POINTVALUE_10M_GENSPDAVE: 5,
    TABLE_TBL_POINTVALUE_10M_TORQUESETPOINTAVE: 6,
    TABLE_TBL_POINTVALUE_10M_TORQUEAVE: 7,
    TABLE_TBL_POINTVALUE_10M_ACTIVEPWAVE: 8,
    TABLE_TBL_POINTVALUE_10M_PCURVESTSAVE: 9,
    TABLE_TBL_POINTVALUE_10M_APPRODUCTION: 10
}

TABLE_IM_10M_CAL_REAL = 'IM_10M_CAL_REAL'
CAL_NTF_WIND_SPEED = 'CAL_NTF_WIND_SPEED'
CAL_NTF_WIND_SPEED_STANDARD = 'CAL_NTF_WIND_SPEED_STANDARD'
CAL_NTF_WIND_SPEED_SITE = 'CAL_NTF_WIND_SPEED_SITE'

CAL_REAL_APPRODUCTION_10M = 'CAL_REAL_APPRODUCTION_10M'
CAL_REAL_APPRODUCTION_10M_ERRORS = 'CAL_REAL_APPRODUCTION_10M_ERRORS'
CAL_THEORY_APPRODUCTION_10M = 'CAL_THEORY_APPRODUCTION_10M'
CAL_ACTIVE_APPRODUCTION_10M = 'CAL_ACTIVE_APPRODUCTION_10M'

CAL_REAL_RPPRODUCTION_10M = 'CAL_REAL_RPPRODUCTION_10M'
CAL_REAL_APCONSUMED_10M = 'CAL_REAL_APCONSUMED_10M'
CAL_REAL_RPCONSUMED_10M = 'CAL_REAL_RPCONSUMED_10M'

# real production 10m errors
PRODUCTION_ERROR_DECREASE = 'DECREASE'
PRODUCTION_ERROR_OUT_OF_MAX_RANGE = 'OUT_OF_MAX_RANGE'
PRODUCTION_ERROR_NULL = 'NAN'
PRODUCTION_ERROR_NAN_PRE = 'NAN_PRE'
PRODUCTION_ERROR_NO_NTF_WIND_SPEED = 'NO_NTF_WIND_SPEED'
PRODUCTION_ERROR_NO_NTF_SITE_WIND_SPEED = 'NO_NTF_SITE_WIND_SPEED'
PRODUCTION_ERROR_NO_NTF_STANDARD_WIND_SPEED = 'NO_NTF_STANDARD_WIND_SPEED'
PRODUCTION_ERROR_NO_TEMP_OUT = 'NO_TEMP_OUT'

CAL_REAL_PRODUCTION_10M_ERRORS_MAP = {
    PRODUCTION_ERROR_DECREASE: 0,
    PRODUCTION_ERROR_OUT_OF_MAX_RANGE: 1,
    PRODUCTION_ERROR_NULL: 2,
    PRODUCTION_ERROR_NAN_PRE: 3,
    PRODUCTION_ERROR_NO_NTF_WIND_SPEED: 4,
    PRODUCTION_ERROR_NO_NTF_SITE_WIND_SPEED: 5,
    PRODUCTION_ERROR_NO_NTF_STANDARD_WIND_SPEED: 6,
    PRODUCTION_ERROR_NO_TEMP_OUT: 7
}

# some output file
IM_STATE_ALL_NC_TURBINE_LAST_RECORD = 'IM_STATE_ALL_NC_TURBINE_LAST_RECORD'
IM_STATE_ALL_SS_TURBINE_LAST_RECORD = 'IM_STATE_ALL_SS_TURBINE_LAST_RECORD'


def clean_flag_set(clean_flag, clean_flag_field, clean_flag_condition):
    clean_flag += clean_flag_condition << (CLEAN_FLAG_MAPS.get(clean_flag_field) * 4)
    return clean_flag


def clean_flag_check_is_normal(clean_flag, clean_flag_field):
    return clean_flag_get(clean_flag, clean_flag_field) == 0


def clean_flag_get(clean_flag, clean_flag_field):
    return (clean_flag & (0b1111 << (CLEAN_FLAG_MAPS.get(clean_flag_field) * 4))) >> \
           (CLEAN_FLAG_MAPS.get(clean_flag_field) * 4)


def clean_flag_to_string(clean_flag):
    for key in CLEAN_FLAG_MAPS:
        value = clean_flag_get(clean_flag, key)
        if value != 0:
            print key, ':',
            if key != TABLE_TBL_POINTVALUE_10M_APPRODUCTION and value & CLEAN_FLAG_TAG_NULL:
                print 'null,',
            if key != TABLE_TBL_POINTVALUE_10M_APPRODUCTION and value & CLEAN_FLAG_TAG_OUT_OF_RANGE:
                print 'out of range,',
            if key == TABLE_TBL_POINTVALUE_10M_WINDSPEEDAVE and value & CLEAN_FLAG_TAG_WIND_SPEED_FREEZE:
                print 'wind speed freeze,',
            if key == TABLE_TBL_POINTVALUE_10M_APPRODUCTION:
                if value & CLEAN_FLAG_TAG_PRODUCTION_NAN:
                    print 'null',
                if value & CLEAN_FLAG_TAG_PRODUCTION_NAN_PRE:
                    print 'pre null',
                if value & CLEAN_FLAG_TAG_PRODUCTION_DECREASE:
                    print 'decrease',
                if value & CLEAN_FLAG_TAG_PRODUCTION_TOO_LARGE:
                    print 'too large',
    print ''


def production_error_set(flag, type):
    flag += 0b1 << CAL_REAL_PRODUCTION_10M_ERRORS_MAP.get(type)
    return flag


def group_process(grouped, agg):
    d = dict(list(grouped))
    result = [agg(g) for g in d.values()]
    return pd.concat(result)

# clean_flag_to_string(9162457088)
